{"version":3,"file":"registerCommand.js","sourceRoot":"","sources":["../src/registerCommand.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA,6CAA+B;AAG/B,kEAA0C;AAC1C,yCAAsC;AAStC,SAAS,WAAW,CAAC,QAAgB;IACnC,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,OAAO,mBAAQ,CAAC,OAAO,CAAC;KACzB;SAAM,IAAI,QAAQ,KAAK,KAAK,EAAE;QAC7B,OAAO,mBAAQ,CAAC,GAAG,CAAC;KACrB;SAAM,IAAI,QAAQ,KAAK,MAAM,EAAE;QAC9B,OAAO,mBAAQ,CAAC,IAAI,CAAC;KACtB;IAED,MAAM,IAAI,KAAK,CAAC,qBAAqB,QAAQ,EAAE,CAAC,CAAC;AACnD,CAAC;AAED,SAAgB,eAAe,CAC7B,SAA0B,EAC1B,WAAmB,EACnB,EAAiD;IAEjD,OAAO,SAAS;SACb,OAAO,CAAC,WAAW,CAAC;SACpB,MAAM,CAAC,qBAAqB,EAAE,0BAA0B,CAAC;SACzD,MAAM,CACL,uBAAuB,EACvB,gGAAgG,CACjG;SACA,MAAM,CAAC,qBAAqB,EAAE,8CAA8C,CAAC;SAC7E,MAAM,CAAC,KAAK,EAAC,eAAe,EAAC,EAAE;;QAC9B,IAAI,eAAe,CAAC,QAAQ,EAAE;YAC5B,eAAe,CAAC,QAAQ,GAAG,WAAW,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;SAClE;aAAM;YACL,eAAe,CAAC,QAAQ,GAAG,mBAAQ,CAAC,IAAI,CAAC;SAC1C;QAED,iDAAiD;QACjD,eAAe,CAAC,eAAe,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC;QACxD,eAAe,CAAC,IAAI,GAAG,MAAA,eAAe,CAAC,IAAI,mCAAI,KAAK,CAAC,SAAS,EAAE,CAAC;QAEjE,eAAe,CAAC,UAAU,GAAG,sBAAY,CAAC,WAAW,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAElF,MAAM,OAAO,GAAG,eAA8B,CAAC;QAC/C,MAAM,YAAY,GAAG,IAAI,sBAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC1D,EAAE,CAAC,YAAY,CAAC,cAAc,EAAE,EAAE,OAAO,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACP,CAAC;AA9BD,0CA8BC","sourcesContent":["import { CommanderStatic } from 'commander';\nimport * as tempy from 'tempy';\n\nimport { Config } from './Config';\nimport ConfigReader from './ConfigReader';\nimport { Platform } from './Platform';\n\nexport interface DefaultOptions {\n  configFile: string;\n  platform: Platform;\n  path: string;\n  shouldBeCleaned: boolean;\n}\n\nfunction mapPlatform(platform: string): Platform {\n  if (platform === 'android') {\n    return Platform.Android;\n  } else if (platform === 'ios') {\n    return Platform.iOS;\n  } else if (platform === 'both') {\n    return Platform.Both;\n  }\n\n  throw new Error(`Unknown platform: ${platform}`);\n}\n\nexport function registerCommand<OptionsType extends DefaultOptions>(\n  commander: CommanderStatic,\n  commandName: string,\n  fn: (config: Config, options: OptionsType) => any\n) {\n  return commander\n    .command(commandName)\n    .option('-c, --config <path>', 'Path to the config file.')\n    .option(\n      '--platform <platform>',\n      'Platform for which the project should be created. Available options: `ios`, `android`, `both`.'\n    )\n    .option('-p, --path <string>', 'Location where the test app will be created.')\n    .action(async providedOptions => {\n      if (providedOptions.platform) {\n        providedOptions.platform = mapPlatform(providedOptions.platform);\n      } else {\n        providedOptions.platform = Platform.Both;\n      }\n\n      // clean temp folder if the path wasn't provided.\n      providedOptions.shouldBeCleaned = !providedOptions.path;\n      providedOptions.path = providedOptions.path ?? tempy.directory();\n\n      providedOptions.configFile = ConfigReader.getFilePath(providedOptions.configFile);\n\n      const options = providedOptions as OptionsType;\n      const configReader = new ConfigReader(options.configFile);\n      fn(configReader.readConfigFile(), options);\n    });\n}\n"]}